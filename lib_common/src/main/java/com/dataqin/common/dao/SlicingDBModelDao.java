package com.dataqin.common.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dataqin.common.model.SlicingDBModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SLICING_DBMODEL".
*/
public class SlicingDBModelDao extends AbstractDao<SlicingDBModel, String> {

    public static final String TABLENAME = "SLICING_DBMODEL";

    /**
     * Properties of entity SlicingDBModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SourcePath = new Property(0, String.class, "sourcePath", true, "SOURCE_PATH");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Baoquan = new Property(2, String.class, "baoquan", false, "BAOQUAN");
        public final static Property SlicingJson = new Property(3, String.class, "slicingJson", false, "SLICING_JSON");
        public final static Property ExtrasJson = new Property(4, String.class, "extrasJson", false, "EXTRAS_JSON");
        public final static Property IsSlicing = new Property(5, boolean.class, "isSlicing", false, "IS_SLICING");
        public final static Property IsSubmit = new Property(6, boolean.class, "isSubmit", false, "IS_SUBMIT");
        public final static Property IsComplete = new Property(7, boolean.class, "isComplete", false, "IS_COMPLETE");
    }


    public SlicingDBModelDao(DaoConfig config) {
        super(config);
    }
    
    public SlicingDBModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SLICING_DBMODEL\" (" + //
                "\"SOURCE_PATH\" TEXT PRIMARY KEY NOT NULL ," + // 0: sourcePath
                "\"USER_ID\" TEXT," + // 1: userId
                "\"BAOQUAN\" TEXT," + // 2: baoquan
                "\"SLICING_JSON\" TEXT," + // 3: slicingJson
                "\"EXTRAS_JSON\" TEXT," + // 4: extrasJson
                "\"IS_SLICING\" INTEGER NOT NULL ," + // 5: isSlicing
                "\"IS_SUBMIT\" INTEGER NOT NULL ," + // 6: isSubmit
                "\"IS_COMPLETE\" INTEGER NOT NULL );"); // 7: isComplete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SLICING_DBMODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SlicingDBModel entity) {
        stmt.clearBindings();
 
        String sourcePath = entity.getSourcePath();
        if (sourcePath != null) {
            stmt.bindString(1, sourcePath);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String baoquan = entity.getBaoquan();
        if (baoquan != null) {
            stmt.bindString(3, baoquan);
        }
 
        String slicingJson = entity.getSlicingJson();
        if (slicingJson != null) {
            stmt.bindString(4, slicingJson);
        }
 
        String extrasJson = entity.getExtrasJson();
        if (extrasJson != null) {
            stmt.bindString(5, extrasJson);
        }
        stmt.bindLong(6, entity.getIsSlicing() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SlicingDBModel entity) {
        stmt.clearBindings();
 
        String sourcePath = entity.getSourcePath();
        if (sourcePath != null) {
            stmt.bindString(1, sourcePath);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String baoquan = entity.getBaoquan();
        if (baoquan != null) {
            stmt.bindString(3, baoquan);
        }
 
        String slicingJson = entity.getSlicingJson();
        if (slicingJson != null) {
            stmt.bindString(4, slicingJson);
        }
 
        String extrasJson = entity.getExtrasJson();
        if (extrasJson != null) {
            stmt.bindString(5, extrasJson);
        }
        stmt.bindLong(6, entity.getIsSlicing() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SlicingDBModel readEntity(Cursor cursor, int offset) {
        SlicingDBModel entity = new SlicingDBModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sourcePath
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // baoquan
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // slicingJson
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // extrasJson
            cursor.getShort(offset + 5) != 0, // isSlicing
            cursor.getShort(offset + 6) != 0, // isSubmit
            cursor.getShort(offset + 7) != 0 // isComplete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SlicingDBModel entity, int offset) {
        entity.setSourcePath(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBaoquan(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSlicingJson(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExtrasJson(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsSlicing(cursor.getShort(offset + 5) != 0);
        entity.setIsSubmit(cursor.getShort(offset + 6) != 0);
        entity.setIsComplete(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(SlicingDBModel entity, long rowId) {
        return entity.getSourcePath();
    }
    
    @Override
    public String getKey(SlicingDBModel entity) {
        if(entity != null) {
            return entity.getSourcePath();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SlicingDBModel entity) {
        return entity.getSourcePath() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
